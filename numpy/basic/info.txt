NumPy is a Python library.

NumPy is used for working with arrays.

NumPy is short for "Numerical Python".

NumPy is a Python library used for working with arrays.

It also has functions for working in domain of linear algebra, fourier transform, and matrices.

NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.

NumPy stands for Numerical Python.


import numpy as np

arr = np.array([1, 2, 3, 4, 5])

print(arr)

print(type(arr))

Why Use NumPy?

In Python we have lists that serve the purpose of arrays, but they are slow to process.
NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.
The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.
Arrays are very frequently used in data science, where speed and resources are very important.

Why is NumPy Array Faster Than Lists?

NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.
This behavior is called locality of reference in computer science.
This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures

import numpy as np


Create a NumPy ndarray Object
NumPy is used to work with arrays. The array object in NumPy is called ndarray.

We can create a NumPy ndarray object by using the array() function.





arr = np.array([1, 2, 3, 4, 5])
       or
arr = np.array((1,2,3,4,5,6,7,8))
print(arr)

print(type(arr))"""


A dimension in arrays is one level of array depth (nested arrays).

0-D Arrays :-

0-D arrays, or Scalars, are the elements in an array. 
Each value in an array is a 0-D array e.x 2

1-D Arrays :-

An array that has 0-D arrays as its elements is called uni-dimensional or 1-D array
e.x [1, 2, 3, 4, 5]

2-D Arrays :-

An array that has 1-D arrays as its elements is called a 2-D array.
These are often used to represent matrix or 2nd order tensors
e.x [[1, 2, 3], [4, 5, 6]]



Check Number of Dimensions?


NumPy Arrays provides the ndim attribute
that returns an integer that tells us how many dimensions the array have


a = np.array(42)
b = np.array([1, 2, 3, 4, 5])
c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])

print(a.ndim)
print(b.ndim)
print(c.ndim)
print(d.ndim)



Higher Dimensional Arrays
An array can have any number of dimensions.

When the array is created, you can define the number 
of dimensions by using the ndmin argument.



arr = np.array([1, 2, 3, 4], ndmin=5)
print(arr.ndim)

